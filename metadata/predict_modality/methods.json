{
  "guanlab_dengkw_pm": {
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/methods/guanlab_dengkw_pm:build_main",
    "task_id": "methods",
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "method_id": "guanlab_dengkw_pm",
    "commit_sha": "0bd597e201b39fbcbc1fcd7047f7654a9713a197",
    "is_baseline": false,
    "method_name": "Guanlab-dengkw",
    "code_version": "build_main",
    "method_summary": "A kernel ridge regression method with RBF kernel.",
    "references_doi": "10.1101/2022.04.11.487796",
    "documentation_url": null,
    "references_bibtex": null,
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/0bd597e201b39fbcbc1fcd7047f7654a9713a197/src/methods/guanlab_dengkw_pm",
    "method_description": "This is a solution developed by Team Guanlab - dengkw in the Neurips 2021 competition to predict one modality\nfrom another using kernel ridge regression (KRR) with RBF kernel. Truncated SVD is applied on the combined\ntraining and test data from modality 1 followed by row-wise z-score normalization on the reduced matrix. The\ntruncated SVD of modality 2 is predicted by training a KRR model on the normalized training matrix of modality 1.\nPredictions on the normalized test matrix are then re-mapped to the modality 2 feature space via the right\nsingular vectors.\n"
  },
  "knnr_py": {
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/methods/knnr_py:build_main",
    "task_id": "methods",
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "method_id": "knnr_py",
    "commit_sha": "0bd597e201b39fbcbc1fcd7047f7654a9713a197",
    "is_baseline": false,
    "method_name": "KNNR (Py)",
    "code_version": "build_main",
    "method_summary": "K-nearest neighbor regression in Python.",
    "references_doi": "10.2307/1403797",
    "documentation_url": null,
    "references_bibtex": null,
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/0bd597e201b39fbcbc1fcd7047f7654a9713a197/src/methods/knnr_py",
    "method_description": "K-nearest neighbor regression in Python."
  },
  "knnr_r": {
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/methods/knnr_r:build_main",
    "task_id": "methods",
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "method_id": "knnr_r",
    "commit_sha": "0bd597e201b39fbcbc1fcd7047f7654a9713a197",
    "is_baseline": false,
    "method_name": "KNNR (R)",
    "code_version": "build_main",
    "method_summary": "K-nearest neighbor regression in R.",
    "references_doi": "10.2307/1403797",
    "documentation_url": null,
    "references_bibtex": null,
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/0bd597e201b39fbcbc1fcd7047f7654a9713a197/src/methods/knnr_r",
    "method_description": "K-nearest neighbor regression in R."
  },
  "lm": {
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/methods/lm:build_main",
    "task_id": "methods",
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "method_id": "lm",
    "commit_sha": "0bd597e201b39fbcbc1fcd7047f7654a9713a197",
    "is_baseline": false,
    "method_name": "Linear Model",
    "code_version": "build_main",
    "method_summary": "Linear model regression.",
    "references_doi": "10.2307/2346786",
    "documentation_url": null,
    "references_bibtex": null,
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/0bd597e201b39fbcbc1fcd7047f7654a9713a197/src/methods/lm",
    "method_description": "A linear model regression method."
  },
  "mean_per_gene": {
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/control_methods/mean_per_gene:build_main",
    "task_id": "control_methods",
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "method_id": "mean_per_gene",
    "commit_sha": "0bd597e201b39fbcbc1fcd7047f7654a9713a197",
    "is_baseline": true,
    "method_name": "Mean per gene",
    "code_version": "build_main",
    "method_summary": "Returns the mean expression value per gene.",
    "references_doi": null,
    "documentation_url": null,
    "references_bibtex": null,
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/0bd597e201b39fbcbc1fcd7047f7654a9713a197/src/control_methods/mean_per_gene",
    "method_description": "Returns the mean expression value per gene."
  },
  "random_predict": {
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/control_methods/random_predict:build_main",
    "task_id": "control_methods",
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "method_id": "random_predict",
    "commit_sha": "0bd597e201b39fbcbc1fcd7047f7654a9713a197",
    "is_baseline": true,
    "method_name": "Random predictions",
    "code_version": "build_main",
    "method_summary": "Returns random training profiles.",
    "references_doi": null,
    "documentation_url": null,
    "references_bibtex": null,
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/0bd597e201b39fbcbc1fcd7047f7654a9713a197/src/control_methods/random_predict",
    "method_description": "Returns random training profiles."
  },
  "solution": {
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/control_methods/solution:build_main",
    "task_id": "control_methods",
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "method_id": "solution",
    "commit_sha": "0bd597e201b39fbcbc1fcd7047f7654a9713a197",
    "is_baseline": true,
    "method_name": "Solution",
    "code_version": "build_main",
    "method_summary": "Returns the ground-truth solution.",
    "references_doi": null,
    "documentation_url": null,
    "references_bibtex": null,
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/0bd597e201b39fbcbc1fcd7047f7654a9713a197/src/control_methods/solution",
    "method_description": "Returns the ground-truth solution."
  },
  "zeros": {
    "image": "https://ghcr.io/openproblems-bio/task_predict_modality/control_methods/zeros:build_main",
    "task_id": "control_methods",
    "code_url": "https://github.com/openproblems-bio/task_predict_modality",
    "method_id": "zeros",
    "commit_sha": "0bd597e201b39fbcbc1fcd7047f7654a9713a197",
    "is_baseline": true,
    "method_name": "Zeros",
    "code_version": "build_main",
    "method_summary": "Returns a prediction consisting of all zeros.",
    "references_doi": null,
    "documentation_url": null,
    "references_bibtex": null,
    "implementation_url": "https://github.com/openproblems-bio/task_predict_modality/blob/0bd597e201b39fbcbc1fcd7047f7654a9713a197/src/control_methods/zeros",
    "method_description": "Returns a prediction consisting of all zeros."
  }
}