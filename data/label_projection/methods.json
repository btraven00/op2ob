[{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems","task_id":"label_projection","code_url":"https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html/tree/v1.0.0/openproblems/tasks","method_id":"knn_classifier_log_cp10k","commit_sha":"b3456fd73c04c28516f6df34c57e6e3e8b0dab32","paper_name":"Nearest neighbor pattern classification","paper_year":1967,"references":"cover1967nearest","is_baseline": false,"method_name":"K-neighbors classifier (log CP10k)","code_version":"v1.0.0","method_summary":"K-neighbors classifier uses the \"k-nearest neighbours\" approach, which is a popular machine learning algorithm for classification and regression tasks. The assumption underlying KNN in this context is that cells with similar gene expression profiles tend to belong to the same cell type. For each unlabelled cell, this method computes the $k$ labelled cells (in this case, 5) with the smallest distance in PCA space, and assigns that cell the most common cell type among its $k$ nearest neighbors.","paper_reference":"cover1967nearest","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/knn_classifier.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-r-base","task_id":"label_projection","code_url":"https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html/tree/v1.0.0/openproblems/tasks","method_id":"knn_classifier_scran","commit_sha":"b3456fd73c04c28516f6df34c57e6e3e8b0dab32","paper_name":"Nearest neighbor pattern classification","paper_year":1967,"references":"cover1967nearest","is_baseline": false,"method_name":"K-neighbors classifier (log scran)","code_version":"v1.0.0","method_summary":"K-neighbors classifier uses the \"k-nearest neighbours\" approach, which is a popular machine learning algorithm for classification and regression tasks. The assumption underlying KNN in this context is that cells with similar gene expression profiles tend to belong to the same cell type. For each unlabelled cell, this method computes the $k$ labelled cells (in this case, 5) with the smallest distance in PCA space, and assigns that cell the most common cell type among its $k$ nearest neighbors.","paper_reference":"cover1967nearest","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/knn_classifier.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems","task_id":"label_projection","code_url":"https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html/tree/v1.0.0/openproblems/tasks","method_id":"logistic_regression_log_cp10k","commit_sha":"b3456fd73c04c28516f6df34c57e6e3e8b0dab32","paper_name":"Applied Logistic Regression","paper_year":2013,"references":"hosmer2013applied","is_baseline": false,"method_name":"Logistic regression (log CP10k)","code_version":"v1.0.0","method_summary":"Logistic Regression estimates parameters of a logistic function for multivariate classification tasks. Here, we use 100-dimensional whitened PCA coordinates as independent variables, and the model minimises the cross entropy loss over all cell type classes. ","paper_reference":"hosmer2013applied","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/logistic_regression.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-r-base","task_id":"label_projection","code_url":"https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html/tree/v1.0.0/openproblems/tasks","method_id":"logistic_regression_scran","commit_sha":"b3456fd73c04c28516f6df34c57e6e3e8b0dab32","paper_name":"Applied Logistic Regression","paper_year":2013,"references":"hosmer2013applied","is_baseline": false,"method_name":"Logistic regression (log scran)","code_version":"v1.0.0","method_summary":"Logistic Regression estimates parameters of a logistic function for multivariate classification tasks. Here, we use 100-dimensional whitened PCA coordinates as independent variables, and the model minimises the cross entropy loss over all cell type classes. ","paper_reference":"hosmer2013applied","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/logistic_regression.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems","task_id":"label_projection","code_url":"https://github.com/openproblems-bio/openproblems/tree/v1.0.0/openproblems/tasks","method_id":"majority_vote","commit_sha":"b3456fd73c04c28516f6df34c57e6e3e8b0dab32","paper_name":"Open Problems for Single Cell Analysis","paper_year":2022,"references":"openproblems","is_baseline": false,"method_name":"Majority Vote","code_version":"v1.0.0","method_summary":"Assignment of all predicted labels as the most common label in the training data","paper_reference":"openproblems","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/baseline.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems","task_id":"label_projection","code_url":"https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html/tree/v1.0.0/openproblems/tasks","method_id":"mlp_log_cp10k","commit_sha":"b3456fd73c04c28516f6df34c57e6e3e8b0dab32","paper_name":"Connectionist learning procedures","paper_year":1990,"references":"hinton1989connectionist","is_baseline": false,"method_name":"Multilayer perceptron (log CP10k)","code_version":"v1.0.0","method_summary":"MLP or \"Multi-Layer Perceptron\" is a type of artificial neural network that consists of multiple layers of interconnected neurons. Each neuron computes a weighted sum of all neurons in the previous layer and transforms it with nonlinear activation function. The output layer provides the final prediction, and network weights are updated by gradient descent to minimize the cross entropy loss. Here, the input data is 100-dimensional whitened PCA coordinates for each cell, and we use two hidden layers of 100 neurons each.","paper_reference":"hinton1989connectionist","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/mlp.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-r-base","task_id":"label_projection","code_url":"https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html/tree/v1.0.0/openproblems/tasks","method_id":"mlp_scran","commit_sha":"b3456fd73c04c28516f6df34c57e6e3e8b0dab32","paper_name":"Connectionist learning procedures","paper_year":1990,"references":"hinton1989connectionist","is_baseline": false,"method_name":"Multilayer perceptron (log scran)","code_version":"v1.0.0","method_summary":"MLP or \"Multi-Layer Perceptron\" is a type of artificial neural network that consists of multiple layers of interconnected neurons. Each neuron computes a weighted sum of all neurons in the previous layer and transforms it with nonlinear activation function. The output layer provides the final prediction, and network weights are updated by gradient descent to minimize the cross entropy loss. Here, the input data is 100-dimensional whitened PCA coordinates for each cell, and we use two hidden layers of 100 neurons each.","paper_reference":"hinton1989connectionist","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/mlp.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems","task_id":"label_projection","code_url":"https://github.com/openproblems-bio/openproblems/tree/v1.0.0/openproblems/tasks","method_id":"random_labels","commit_sha":"b3456fd73c04c28516f6df34c57e6e3e8b0dab32","paper_name":"Open Problems for Single Cell Analysis","paper_year":2022,"references":"openproblems","is_baseline": true,"method_name":"Random Labels","code_version":"v1.0.0","method_summary":"Random assignment of predicted labels proportionate to label abundance in training data","paper_reference":"openproblems","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/baseline.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-python-pytorch","task_id":"label_projection","code_url":"https://github.com/YosefLab/scvi-tools/tree/v1.0.0/openproblems/tasks","method_id":"scanvi_all_genes","commit_sha":"cef4e5cac0b51d454d45e22e354988e77540c40d","paper_name":"Probabilistic harmonization and annotation of single-cell transcriptomics data with deep generative models","paper_year":2021,"references":"xu2021probabilistic","is_baseline": false,"method_name":"scANVI (All genes)","code_version":"v1.0.0","method_summary":"scANVI or \"single-cell ANnotation using Variational Inference\" is a semi-supervised variant of the scVI(Lopez et al. 2018) algorithm. Like scVI, scANVI uses deep neural networks and stochastic optimization to model uncertainty caused by technical noise and bias in single - cell transcriptomics measurements. However, scANVI also leverages cell type labels in the generative modelling. In this approach, scANVI is used to predict the cell type labels of the unlabelled test data.","paper_reference":"xu2021probabilistic","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/scvi_tools.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-python-pytorch","task_id":"label_projection","code_url":"https://github.com/YosefLab/scvi-tools/tree/v1.0.0/openproblems/tasks","method_id":"scanvi_hvg","commit_sha":"cef4e5cac0b51d454d45e22e354988e77540c40d","paper_name":"Probabilistic harmonization and annotation of single-cell transcriptomics data with deep generative models","paper_year":2021,"references":"xu2021probabilistic","is_baseline": false,"method_name":"scANVI (Seurat v3 2000 HVG)","code_version":"v1.0.0","method_summary":"scANVI or \"single-cell ANnotation using Variational Inference\" is a semi-supervised variant of the scVI(Lopez et al. 2018) algorithm. Like scVI, scANVI uses deep neural networks and stochastic optimization to model uncertainty caused by technical noise and bias in single - cell transcriptomics measurements. However, scANVI also leverages cell type labels in the generative modelling. In this approach, scANVI is used to predict the cell type labels of the unlabelled test data.","paper_reference":"xu2021probabilistic","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/scvi_tools.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-python-pytorch","task_id":"label_projection","code_url":"https://github.com/YosefLab/scvi-tools/tree/v1.0.0/openproblems/tasks","method_id":"scarches_scanvi_all_genes","commit_sha":"cef4e5cac0b51d454d45e22e354988e77540c40d","paper_name":"Query to reference single-cell integration with transfer learning","paper_year":2021,"references":"lotfollahi2020query","is_baseline": false,"method_name":"scArches+scANVI (All genes)","code_version":"v1.0.0","method_summary":"scArches+scANVI or \"Single-cell architecture surgery\" is a deep learning method for mapping new datasets onto a pre-existing reference model, using transfer learning and parameter optimization. It first uses scANVI to build a reference model from the training data, and then apply scArches to map the test data onto the reference model and make predictions.","paper_reference":"lotfollahi2020query","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/scvi_tools.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-python-pytorch","task_id":"label_projection","code_url":"https://github.com/YosefLab/scvi-tools/tree/v1.0.0/openproblems/tasks","method_id":"scarches_scanvi_hvg","commit_sha":"cef4e5cac0b51d454d45e22e354988e77540c40d","paper_name":"Query to reference single-cell integration with transfer learning","paper_year":2021,"references":"lotfollahi2020query","is_baseline": false,"method_name":"scArches+scANVI (Seurat v3 2000 HVG)","code_version":"v1.0.0","method_summary":"scArches+scANVI or \"Single-cell architecture surgery\" is a deep learning method for mapping new datasets onto a pre-existing reference model, using transfer learning and parameter optimization. It first uses scANVI to build a reference model from the training data, and then apply scArches to map the test data onto the reference model and make predictions.","paper_reference":"lotfollahi2020query","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/scvi_tools.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-python-pytorch","task_id":"label_projection","code_url":"https://github.com/YosefLab/scvi-tools/tree/v1.0.0/openproblems/tasks","method_id":"scarches_scanvi_xgb_all_genes","commit_sha":"cef4e5cac0b51d454d45e22e354988e77540c40d","paper_name":"Query to reference single-cell integration with transfer learning","paper_year":2021,"references":"lotfollahi2020query","is_baseline": false,"method_name":"scArches+scANVI+xgboost (All genes)","code_version":"v1.0.0","method_summary":"scArches+scANVI or \"Single-cell architecture surgery\" is a deep learning method for mapping new datasets onto a pre-existing reference model, using transfer learning and parameter optimization. It first uses scANVI to build a reference model from the training data, and then apply scArches to map the test data onto the reference model and make predictions.","paper_reference":"lotfollahi2020query","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/scvi_tools.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-python-pytorch","task_id":"label_projection","code_url":"https://github.com/YosefLab/scvi-tools/tree/v1.0.0/openproblems/tasks","method_id":"scarches_scanvi_xgb_hvg","commit_sha":"cef4e5cac0b51d454d45e22e354988e77540c40d","paper_name":"Query to reference single-cell integration with transfer learning","paper_year":2021,"references":"lotfollahi2020query","is_baseline": false,"method_name":"scArches+scANVI+xgboost (Seurat v3 2000 HVG)","code_version":"v1.0.0","method_summary":"scArches+scANVI or \"Single-cell architecture surgery\" is a deep learning method for mapping new datasets onto a pre-existing reference model, using transfer learning and parameter optimization. It first uses scANVI to build a reference model from the training data, and then apply scArches to map the test data onto the reference model and make predictions.","paper_reference":"lotfollahi2020query","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/scvi_tools.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-r-extras","task_id":"label_projection","code_url":"https://github.com/satijalab/seurat/tree/v1.0.0/openproblems/tasks","method_id":"seurat","commit_sha":"b3456fd73c04c28516f6df34c57e6e3e8b0dab32","paper_name":"Integrated analysis of multimodal single-cell data","paper_year":2021,"references":"hao2021integrated","is_baseline": false,"method_name":"Seurat reference mapping (SCTransform)","code_version":"v1.0.0","method_summary":"Seurat reference mapping is a cell type label transfer method provided by the Seurat package. Gene expression counts are first normalised by SCTransform before computing PCA. Then it finds mutual nearest neighbours, known as transfer anchors, between the labelled and unlabelled part of the data in PCA space, and computes each cell’s distance to each of the anchor pairs. Finally, it uses the labelled anchors to predict cell types for unlabelled cells based on these distances.","paper_reference":"hao2021integrated","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/seurat.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems","task_id":"label_projection","code_url":"https://github.com/openproblems-bio/openproblems/tree/v1.0.0/openproblems/tasks","method_id":"true_labels","commit_sha":"b3456fd73c04c28516f6df34c57e6e3e8b0dab32","paper_name":"Open Problems for Single Cell Analysis","paper_year":2022,"references":"openproblems","is_baseline": true,"method_name":"True Labels","code_version":"v1.0.0","method_summary":"Perfect assignment of the predicted labels from the test labels","paper_reference":"openproblems","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/baseline.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-python-extras","task_id":"label_projection","code_url":"https://xgboost.readthedocs.io/en/stable/index.html/tree/v1.0.0/openproblems/tasks","method_id":"xgboost_log_cp10k","commit_sha":"cef4e5cac0b51d454d45e22e354988e77540c40d","paper_name":"XGBoost: A Scalable Tree Boosting System","paper_year":2016,"references":"chen2016xgboost","is_baseline": false,"method_name":"XGBoost (log CP10k)","code_version":"v1.0.0","method_summary":"XGBoost is a gradient boosting decision tree model that learns multiple tree structures in the form of a series of input features and their values, leading to a prediction decision, and averages predictions from all its trees. Here, input features are normalised gene expression values.","paper_reference":"chen2016xgboost","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/xgboost.py"},{"image":"https://github.com/openproblems-bio/openproblems/pkgs/container/openproblems-r-extras","task_id":"label_projection","code_url":"https://xgboost.readthedocs.io/en/stable/index.html/tree/v1.0.0/openproblems/tasks","method_id":"xgboost_scran","commit_sha":"cef4e5cac0b51d454d45e22e354988e77540c40d","paper_name":"XGBoost: A Scalable Tree Boosting System","paper_year":2016,"references":"chen2016xgboost","is_baseline": false,"method_name":"XGBoost (log scran)","code_version":"v1.0.0","method_summary":"XGBoost is a gradient boosting decision tree model that learns multiple tree structures in the form of a series of input features and their values, leading to a prediction decision, and averages predictions from all its trees. Here, input features are normalised gene expression values.","paper_reference":"chen2016xgboost","implementation_url":"https://github.com/openproblems-bio/openproblems/blob/v1.0.0/openproblems/tasks/label_projection/methods/xgboost.py"}]